// Generated by CoffeeScript 1.8.0
GoGame = (function() {
  function GoGame(size) {
    if (size == null) {
      size = 9;
    }
    this.board = new Board(size);
    this.turn = Cell.PIECE.BLACK;
  }

  GoGame.prototype.pass = function() {
    return this._alternateTurn();
  };

  GoGame.prototype.play = function(x, y) {
    var cell;
    cell = this.board.at(x, y).play(this.turn);
    this._alternateTurn();
    return cell;
  };

  GoGame.prototype._alternateTurn = function() {
    return this.turn = !this.turn;
  };

  return GoGame;

})();

Board = (function() {
  function Board(size) {
    var cell, left, up, x, y, _i, _j, _ref, _ref1;
    this.size = size;
    this.cells = [];
    for (x = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      this.cells.push([]);
      for (y = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        cell = new Cell();
        this.cells[x].push(cell);
        if (y > 0) {
          up = this.cells[x][y - 1];
          cell.up = up;
          up.down = cell;
        }
        if (x > 0) {
          left = this.cells[x - 1][y];
          cell.left = left;
          left.right = cell;
        }
      }
    }
  }

  Board.prototype.at = function(x, y) {
    return this.cells[x][y];
  };

  return Board;

})();

Cell = (function() {
  Cell.PIECE = {
    EMPTY: null,
    BLACK: false,
    WHITE: true
  };

  function Cell() {
    this.value = Cell.PIECE.EMPTY;
  }

  Cell.prototype.play = function(value) {
    this.value = value;
    this.cluster = new Cluster(this);
    this._mergeClusters();
    return this;
  };

  Cell.prototype.surrounding = function() {
    var surrounding;
    surrounding = [];
    if (this.up != null) {
      surrounding.push(this.up);
    }
    if (this.down != null) {
      surrounding.push(this.down);
    }
    if (this.left != null) {
      surrounding.push(this.left);
    }
    if (this.right != null) {
      surrounding.push(this.right);
    }
    return surrounding;
  };

  Cell.prototype.liberties = function() {
    var cell, liberties, _i, _len, _ref;
    liberties = [];
    _ref = this.surrounding();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.value === Cell.PIECE.EMPTY) {
        liberties.push(cell);
      }
    }
    return liberties;
  };

  Cell.prototype._mergeClusters = function() {
    var cell, _i, _len, _ref, _results;
    _ref = this.surrounding();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.value === this.value) {
        _results.push(this.cluster.merge(cell.cluster));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Cell;

})();

Cluster = (function() {
  function Cluster(cell) {
    this.cells = [cell];
  }

  Cluster.prototype.liberties = function() {
    var cell, liberties, _i, _len, _ref;
    liberties = [];
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      liberties = liberties.concat(cell.liberties());
    }
    return liberties;
  };

  Cluster.prototype.merge = function(cluster) {
    var cell, _i, _len, _ref, _results;
    _ref = cluster.cells;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      this.cells.push(cell);
      _results.push(cell.cluster = this);
    }
    return _results;
  };

  return Cluster;

})();
