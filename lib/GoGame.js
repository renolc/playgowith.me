// Generated by CoffeeScript 1.8.0
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GoGame = (function() {
  function GoGame(size) {
    if (size == null) {
      size = 19;
    }
    this.board = new Board(size);
    this.turn = Cell.PIECE.BLACK;
  }

  GoGame.prototype.pass = function() {
    return this.alternateTurn();
  };

  GoGame.prototype.play = function(x, y) {
    var cell, _ref;
    cell = (_ref = this.board.at(x, y)) != null ? _ref.play(this.turn) : void 0;
    if (cell) {
      this.alternateTurn();
    }
    return cell;
  };

  GoGame.prototype.alternateTurn = function() {
    return this.turn = !this.turn;
  };

  return GoGame;

})();

Board = (function() {
  function Board(size) {
    var cell, left, up, x, y, _i, _j, _ref, _ref1;
    this.size = size;
    this.cells = [];
    for (x = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      this.cells.push([]);
      for (y = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        cell = new Cell();
        this.cells[x].push(cell);
        if (y > 0) {
          up = this.cells[x][y - 1];
          cell.up = up;
          up.down = cell;
        }
        if (x > 0) {
          left = this.cells[x - 1][y];
          cell.left = left;
          left.right = cell;
        }
      }
    }
  }

  Board.prototype.at = function(x, y) {
    var _ref;
    return (_ref = this.cells[x]) != null ? _ref[y] : void 0;
  };

  return Board;

})();

Cell = (function() {
  Cell.PIECE = {
    EMPTY: null,
    BLACK: false,
    WHITE: true
  };

  function Cell() {
    this.value = Cell.PIECE.EMPTY;
  }

  Cell.prototype.play = function(value) {
    var cell, surroundingFriendlyClusters, surroundingFriendlyClustersWithNoLiberties, thisCellLibertiesCount, _i, _j, _len, _len1, _ref, _ref1;
    if (!this.is(Cell.PIECE.EMPTY)) {
      return false;
    }
    this.value = value;
    _ref = this.surrounding();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.is(!this.value) && cell.cluster.liberties().length === 0) {
        cell.cluster.remove();
      }
    }
    thisCellLibertiesCount = this.liberties().length;
    surroundingFriendlyClusters = 0;
    surroundingFriendlyClustersWithNoLiberties = 0;
    _ref1 = this.surrounding();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      cell = _ref1[_j];
      if (cell.is(this.value)) {
        surroundingFriendlyClusters++;
        if (cell.cluster.liberties().length + thisCellLibertiesCount === 0) {
          surroundingFriendlyClustersWithNoLiberties++;
        }
      }
    }
    if (surroundingFriendlyClusters > 0 && surroundingFriendlyClusters === surroundingFriendlyClustersWithNoLiberties) {
      this.value = Cell.PIECE.EMPTY;
      return false;
    }
    if (surroundingFriendlyClusters === 0 && thisCellLibertiesCount === 0) {
      this.value = Cell.PIECE.EMPTY;
      return false;
    }
    this.cluster = new Cluster(this);
    this.mergeClusters();
    return this;
  };

  Cell.prototype.remove = function() {
    this.value = Cell.PIECE.EMPTY;
    return this.cluster = null;
  };

  Cell.prototype.is = function(value) {
    return this.value === value;
  };

  Cell.prototype.surrounding = function() {
    var surrounding;
    surrounding = [];
    if (this.up != null) {
      surrounding.push(this.up);
    }
    if (this.down != null) {
      surrounding.push(this.down);
    }
    if (this.left != null) {
      surrounding.push(this.left);
    }
    if (this.right != null) {
      surrounding.push(this.right);
    }
    return surrounding;
  };

  Cell.prototype.liberties = function() {
    var cell, liberties, _i, _len, _ref;
    liberties = [];
    _ref = this.surrounding();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.is(Cell.PIECE.EMPTY) && __indexOf.call(liberties, cell) < 0) {
        liberties.push(cell);
      }
    }
    return liberties;
  };

  Cell.prototype.mergeClusters = function() {
    var cell, _i, _len, _ref, _results;
    _ref = this.surrounding();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.is(this.value)) {
        _results.push(this.cluster.merge(cell.cluster));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Cell;

})();

Cluster = (function() {
  function Cluster(cell) {
    this.cells = [cell];
  }

  Cluster.prototype.liberties = function() {
    var cell, liberties, _i, _len, _ref;
    liberties = [];
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      liberties = liberties.concat(cell.liberties());
    }
    return liberties;
  };

  Cluster.prototype.merge = function(cluster) {
    var cell, _i, _len, _ref, _results;
    _ref = cluster.cells;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (__indexOf.call(this.cells, cell) < 0) {
        this.cells.push(cell);
      }
      _results.push(cell.cluster = this);
    }
    return _results;
  };

  Cluster.prototype.remove = function() {
    var cell, _i, _len, _ref;
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      cell.remove();
    }
    return this.cells = [];
  };

  return Cluster;

})();
